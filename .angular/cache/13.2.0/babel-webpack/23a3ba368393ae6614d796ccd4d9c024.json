{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Day } from '../shared/models/day';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DayService = /*#__PURE__*/(() => {\n  class DayService {\n    constructor(http) {\n      this.http = http;\n      this.selectedWeekNumberChangedSource = new Subject();\n      this.selectedWeekChangedSource = new Subject();\n      this.selectedWeekNumberChanged$ = this.selectedWeekNumberChangedSource.asObservable();\n      this.selectedWeekChanged$ = this.selectedWeekChangedSource.asObservable(); // on init set week number of today \n\n      this.selectedWeekNumberChangedSource.next(this.getWeekNumberOfToday());\n    }\n\n    setSelectedWeekNumber(pWeekNumber) {\n      this.selectedWeekNumberChangedSource.next(pWeekNumber);\n      console.time(\"fetchWeek\");\n      this.fetchWeek(pWeekNumber).subscribe(week => {\n        this.selectedWeekChangedSource.next(week);\n      });\n      console.timeEnd(\"fetchWeek\");\n    }\n\n    setSelectedWeekNumberToThisWeek() {\n      this.setSelectedWeekNumber(this.getWeekNumberOfToday());\n    }\n\n    getWeekNumberOfToday() {\n      var date = new Date();\n      date.setHours(0, 0, 0, 0); //thursday in current week decides the year. \n\n      date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7); // this sets date to the thursday in the week of date\n      //January 4 is always in week 1. \n\n      var jan4th = new Date(date.getFullYear(), 0, 4); //adjust to Thursday in week 1 and count number of weeks from date to jan4th\n\n      var diffInDays = (date.getTime() - jan4th.getTime()) / 86400000;\n      return 1 + Math.round((diffInDays - 3 + (jan4th.getDay() + 6) % 7) / 7);\n    }\n\n    fetchWeek(pWeekNumber) {\n      console.log(\"sending GET request to \" + \"http://localhost:8000/api/week/\" + pWeekNumber);\n      return this.http.get(\"http://localhost:8000/api/week/\" + pWeekNumber).pipe(map(res => {\n        return res.map(res => {\n          console.log(Date.parse(res.date.toString()));\n          return new Day(res.date);\n        });\n      }));\n    }\n\n  }\n\n  DayService.ɵfac = function DayService_Factory(t) {\n    return new (t || DayService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DayService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DayService,\n    factory: DayService.ɵfac,\n    providedIn: 'root'\n  });\n  return DayService;\n})();","map":null,"metadata":{},"sourceType":"module"}